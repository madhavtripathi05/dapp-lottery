{"version":3,"sources":["web3.js","lottery.js","App.js","reportWebVitals.js","index.js"],"names":["web3","window","ethereum","request","method","Web3","console","log","eth","accounts","currentProvider","alert","Contract","inputs","stateMutability","type","name","outputs","internalType","App","useState","manager","setManager","value","setValue","message","setMessage","account","setAccount","players","setPlayers","balance","setBalance","winner","setWinner","reload","setReload","loading","setLoading","useEffect","a","getAccounts","lottery","methods","call","getPlayers","getCurrentWinner","getBalance","options","address","init","onSubmit","e","preventDefault","enter","send","from","utils","toWei","pickWinner","result","className","length","fromWei","onClick","onChange","target","width","height","viewBox","xmlns","fill","strokeWidth","strokeLinecap","cx","cy","r","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a800d4f8.chunk.js","sourcesContent":["import Web3 from 'web3';\nlet web3;\n// Modern DApp Browsers\nif (typeof window !== 'undefined' && typeof window.ethereum !== 'undefined') {\n  // We are in the browser and metamask is running.\n  window.ethereum.request({ method: 'eth_requestAccounts' });\n  web3 = new Web3(window.ethereum);\n  console.log(web3.eth.accounts);\n}\n// Legacy DApp Browsers\nelse if (window.web3) {\n  web3 = new Web3(window.web3.currentProvider);\n  console.log(web3.eth.accounts);\n}\n// Non-DApp Browsers\nelse {\n  alert('You have to install MetaMask !');\n}\n\nexport default web3;\n","import web3 from './web3';\n\nconst address = '0xAF3fc85741e2BD214C9C2e4500b77F0979ed129E';\nconst abi = [\n  {\n    inputs: [],\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    inputs: [],\n    name: 'currentWinner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'enter',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getCurrentWinner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getPlayers',\n    outputs: [\n      {\n        internalType: 'address payable[]',\n        name: '',\n        type: 'address[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'manager',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'pickWinner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    name: 'players',\n    outputs: [\n      {\n        internalType: 'address payable',\n        name: '',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n\nexport default new web3.eth.Contract(abi, address);\n","import './App.css';\nimport { useEffect, useState } from 'react';\nimport web3 from './web3';\nimport lottery from './lottery';\n\nfunction App() {\n  const [manager, setManager] = useState('Loading...');\n  const [value, setValue] = useState('');\n  const [message, setMessage] = useState('');\n  const [account, setAccount] = useState('');\n  const [players, setPlayers] = useState([]);\n  const [balance, setBalance] = useState('');\n  const [winner, setWinner] = useState('');\n  const [reload, setReload] = useState(false);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const init = async () => {\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n      setManager(await lottery.methods.manager().call());\n      setPlayers(await lottery.methods.getPlayers().call());\n      setWinner(await lottery.methods.getCurrentWinner().call());\n      setBalance(await web3.eth.getBalance(lottery.options.address));\n    };\n    init();\n  }, [reload]);\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setMessage('Processing your transaction...');\n    console.log(account);\n    await lottery.methods.enter().send({\n      from: account,\n      value: web3.utils.toWei(value, 'ether'),\n    });\n    setValue('');\n    setMessage(\"You've been entered!\");\n    setLoading(false);\n    setReload(!reload);\n  };\n\n  const pickWinner = async () => {\n    setLoading(true);\n    setMessage('Choosing a winner...');\n    await lottery.methods.pickWinner().send({\n      from: account,\n    });\n    const result = await lottery.methods.getCurrentWinner().call();\n    console.log('result', result);\n    setWinner(result);\n    setMessage(`Winner is selected`);\n    setLoading(false);\n    setReload(!reload);\n  };\n\n  return (\n    <div className=''>\n      <h2>Lottery Smart Contract</h2>\n      <p>This contract is managed by {manager}</p>\n      <p>\n        Currently there are {players.length} players entered with total of{' '}\n        {web3.utils.fromWei(balance, 'ether')} ether\n      </p>\n      {account ? (\n        <>\n          <p>Your account: {account}</p>\n        </>\n      ) : (\n        <>\n          <p>\n            Please login to your metamask account to continue, already done?{' '}\n            <span>\n              <button onClick={() => setReload(!reload)}>reload</button>\n            </span>\n          </p>\n        </>\n      )}\n      <hr />\n      <form onSubmit={onSubmit}>\n        <h4>Try your luck!</h4>\n        <h3>Minimum amount: 0.002 ether</h3>\n        <div className=''>\n          <label>\n            <h3>Enter amount in ether: </h3>\n          </label>\n          <input\n            type='text'\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n          />\n        </div>\n        <br />\n        <button>Enter</button>\n        <br />\n        <br />\n        {account === '0xfb2F3A65c7EEA39b9b07D62ae5E3Acd168640689' && (\n          <button type='button' onClick={pickWinner}>\n            Pick a winner\n          </button>\n        )}\n      </form>\n\n      <h4>{message}</h4>\n      {loading && (\n        <svg\n          className='spinner'\n          width='65px'\n          height='65px'\n          viewBox='0 0 66 66'\n          xmlns='http://www.w3.org/2000/svg'\n        >\n          <circle\n            className='path'\n            fill='none'\n            strokeWidth='6'\n            strokeLinecap='round'\n            cx='33'\n            cy='33'\n            r='30'\n          ></circle>\n        </svg>\n      )}\n\n      {winner && <h4>Last winner: {winner}</h4>}\n      <span>\n        <a href='https://github.com/madhavtripathi05/dapp-lottery'>GitHub</a>\n      </span>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}